#include "PhysicsLabZW.h"

#include <PluginMessageType.h>

#include <iostream>
#include <string>

// OSG:
#include <osg/Node>
#include <osg/Geode>
#include <osg/Geometry>
#include <osg/Material>
#include <osg/Vec3d>
#include <osg/MatrixTransform>

using namespace std;
using namespace cvr;
using namespace osg;

CVRPLUGIN(PhysicsLabZW)

// Constructor
PhysicsLabZW::PhysicsLabZW()
{
}

void PhysicsLabZW::menuCallback(MenuItem* menuItem)
{
  
}

// intialize
bool PhysicsLabZW::init()
{
  cerr << "PhysicsLabZW::PhysicsLabZW" << endl;

  _mainMenu = new SubMenu("PhysicsLabZW", "PhysicsLabZW");
  _mainMenu->setCallback(this);
  MenuSystem::instance()->addMenuItem(_mainMenu);

  return true;
}

// this is called if the plugin is removed at runtime
PhysicsLabZW::~PhysicsLabZW()
{

}

void PhysicsLabZW::preFrame()
{
//  PluginHelper::getScene()->addChild(node);
    MatrixTransform* cameraMatrix;
    Geode* floorGeode = new Geode;
    Geometry* floorGeometry = new Geometry;
    floorGeode->addDrawable( floorGeometry );
    PluginHelper::getScene()->addChild( floorGeode );
    
    const int floorWidth = 100;
    Vec3Array* floorVerts = new Vec3Array;
    //floorVerts->push_back( Vec3(0, -floorWidth, 0) );
    //floorVerts->push_back( Vec3(floorWidth, -floorWidth, 0) );
    //floorVerts->push_back( Vec3(floorWidth, floorWidth, 0) );
    //floorVerts->push_back( Vec3(0, floorWidth, 0) );
    floorVerts->push_back( Vec3(0, 0, -floorWidth) );
    floorVerts->push_back( Vec3(floorWidth, 0, -floorWidth) );
    floorVerts->push_back( Vec3(floorWidth, 0, floorWidth) );
    floorVerts->push_back( Vec3(0, 0, floorWidth) );
    floorGeometry->setVertexArray( floorVerts );
    
    DrawElementsUInt* floorFace = new DrawElementsUInt(PrimitiveSet::QUADS, 0);
    floorFace->push_back(3);
    floorFace->push_back(2);
    floorFace->push_back(1);
    floorFace->push_back(0);
    floorGeometry->addPrimitiveSet(floorFace);
    
    osg::Vec4Array* colors = new osg::Vec4Array;
    colors->push_back( Vec4(0.0f, 1.0f, 0.0f, 1.0f) ); //index 0 red
    floorGeometry->setColorArray(colors);
    floorGeometry->setColorBinding(Geometry::BIND_PER_VERTEX);
    
    LightSource * lightsrc = new LightSource;
    PluginHelper::getScene()->addChild( lightsrc );
    Light * light0 = new Light;
    light0->setPosition( Vec4(0.0f, -1.0f, 0.0f, 1.0f) );
    light0->setLightNum(0);
    light0->setAmbient( Vec4(1.0f, 1.0f, 1.0f, 1.0f) );
    //light0->setDiffuse( Vec4(1.0f, 1.0f, 1.0f, 1.0f) );
    lightsrc->setLight( light0 );
    lightsrc->setLocalStateSetModes(osg::StateAttribute::ON);
}

